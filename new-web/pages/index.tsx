import React from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';

import { nextReduxWrapper } from 'app';
import {
  getArticles,
  getRunningOperationPromises as getArticlesRunningOperationPromises,
  useGetArticlesQuery,
} from 'app/api/articleExtendedApi';
import {
  getWorksByCategory,
  getRunningOperationPromises as getWorksRunningOperationPromises,
  useGetWorksByCategoryQuery,
} from 'app/api/workExtendedApi';

import PageContainer from 'common/components/PageContainer';
import WithLoadingOverlay from 'common/components/WithLoadingOverlay';

import {
  ArticleSection,
  HeroBanner,
  TalkSection,
  WorkSection,
} from 'components/home';

import { isLoadingOverall } from 'utils';

export const getStaticProps = nextReduxWrapper.getStaticProps(
  (store) => async () => {
    store.dispatch(
      getArticles.initiate({
        category: 0,
        limit: 3,
        tags: [],
      })
    );

    await Promise.all(getArticlesRunningOperationPromises());

    store.dispatch(
      getWorksByCategory.initiate({
        category: 'Work',
        limit: 5,
      })
    );

    await Promise.all(getWorksRunningOperationPromises());

    return {
      props: {},
    };
  }
);

const Home: NextPage = () => {
  const { data: articlesData, isFetching: articlesFetching } =
    useGetArticlesQuery({
      category: 0,
      limit: 3,
      tags: [],
    });

  const { selectedData: worksData, isFetching: worksFetching } =
    useGetWorksByCategoryQuery(
      { category: 'Work', limit: 5 },
      {
        selectFromResult: (result) => ({
          ...result,
          selectedData: result.data
            ? result.data.items.filter(
                (resultData) => resultData.title !== 'Node News API'
              )
            : [],
        }),
      }
    );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageContainer extraClassName="landing-list-page" isFirstMount={false}>
        <WithLoadingOverlay
          contentComponent={
            <>
              <HeroBanner />

              <WorkSection finishIsFirstMount={false} worksData={worksData} />

              <ArticleSection
                articlesData={articlesData?.items ?? []}
                finishIsFirstMount={false}
              />

              <TalkSection finishIsFirstMount={false} />
            </>
          }
          isLoading={isLoadingOverall(worksFetching, articlesFetching)}
          loaderDuration={1000}
        />
      </PageContainer>
    </>
  );
};

export default Home;
